#define TAM 99
#define CANT_Reg 32
void ejecutaOperacion(char Top1, char Top2, unsigned int registros[CANT_Reg], int *pos)
{

}

void leeOperando(char instruccion[TAM], unsigned int registros[CANT_Reg], int *posAct, int PosReg)
{   char aux,codReg;
    char Tipo_operando=registros[PosReg]>>24;
    switch (Tipo_operando) {
    case 1 //registro
        aux=(instruccion[++(*pos)]) & 0x1F;
        registros[PosReg]=registros[PosReg]|aux;
        break;
    case 2 //inmediato
        
        break;
      
    case 3 //memoria
        
        break;
    default:
        break;
}
}

void DecodificaLM(char instruccion[TAM], int TamCod, unsigned int registros[CANT_Reg])//instruccion tiene el codigo en lenguaje maquina
{    int i=0;
     char inst,CodOp, Top1, Top2;
     while (i<TamCod)
     {  inst=instruccion[i];
        CodOp=inst& 0X1F;
        //modifico OPC
        registros[4]=CodOp:
        if((inst & 0x1F)==0x0F) // se trata de una inst. sin operandos(stop)
        {   
        }
        else
        {
            if((inst& 0X10)==0)// se trata de una inst. con 1 operando
            else// instruccion con 2 operandos
            {  Top2=(inst & 0xC0)>>6  & 0x03;
               Top1=(inst & 0x30)>>4  & 0x03;
               if(Top1+Top2<=TamCod)
                {  //modifico OP1 
                   registros[5]=(unsigned int)Top1<<24;
                   //modifico OP2
                   registros[6]=(unsigned int)Top2<<24;
                }

            }
        }
    
     }
     

}
//OPERACIONES
void MOV()

void inicializaReg( unsigned int registros[CANT_Reg])
{
    int i;
    for(i=0;i<CANT_Reg;i++)
        registros[i]=0;
}
 main(int argc, char const *argv[])
{
     unsigned int registros[CANT_Reg];//32 registros de 4 bytes, la POS indica el codigo del registro
     inicializaReg(registros);
}